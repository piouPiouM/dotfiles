local F = require("ppm.toolkit.fp")
local pipe = F.pipe

describe("Functions", function()
  local Module = require("ppm.toolkit.fp.string")

  describe("pipeables", function()
    describe("glue()", function()
      it("should join strings of array with the given separator", function()
        local actual = pipe({ "a", "b", "c" }, Module.glue(":"))
        assert.are.equals("a:b:c", actual)
      end)
    end)

    describe("trim_start()", function()
      describe("without chars", function()
        it("should delete whitespaces from the beginning", function()
          assert.are.equals("aba", pipe(" aba", Module.trim_start()))
          assert.are.equals("aba", pipe("\taba", Module.trim_start()))
          assert.are.equals("aba", pipe("\t aba", Module.trim_start()))
        end)

        it("should return the initial string", function()
          assert.are.equals("abc", pipe("abc", Module.trim_start()))
        end)
      end)

      describe("with chars", function()
        it("should delete the single letter `a` from the beginning", function()
          assert.are.equals("ba", pipe("aba", Module.trim_start("a")))
        end)

        it("should delete all consecutive letters `a` from the beginning", function()
          assert.are.equals("ba", pipe("aaaaba", Module.trim_start("a")))
        end)

        it("should delete all consecutive given letters from the beginning", function()
          assert.are.equals("c", pipe("a:bc", Module.trim_start("a:b")))
          assert.are.equals("c", pipe(":abc", Module.trim_start("a:b")))
          assert.are.equals("c", pipe(":bac", Module.trim_start("a:b")))
          assert.are.equals("c", pipe("b:ac", Module.trim_start("a:b")))
          assert.are.equals("c", pipe("ba:c", Module.trim_start("a:b")))
        end)

        it("should return the initial string", function()
          assert.are.equals("ca:b", pipe("ca:b", Module.trim_start("a:b")))
        end)
      end)
    end)

    describe("trim_end()", function()
      describe("without chars", function()
        it("should delete whitespaces from the end", function()
          assert.are.equals("aba", pipe("aba ", Module.trim_end()))
          assert.are.equals("aba", pipe("aba\t", Module.trim_end()))
          assert.are.equals("aba", pipe("aba\t ", Module.trim_end()))
        end)

        it("should return the initial string when they is nothing to remove", function()
          assert.are.equals("abc", pipe("abc", Module.trim_end()))
        end)
      end)

      describe("with chars", function()
        it("should delete the single letter `a` from the end", function()
          assert.are.equals("ab", pipe("aba", Module.trim_end("a")))
        end)

        it("should delete all consecutive letters `a` from the beginning", function()
          assert.are.equals("ab", pipe("abaaa", Module.trim_end("a")))
        end)

        it("should delete all consecutive given letters from the beginning", function()
          assert.are.equals("c", pipe("ca:b", Module.trim_end("a:b")))
          assert.are.equals("c", pipe("c:ab", Module.trim_end("a:b")))
          assert.are.equals("c", pipe("c:ba", Module.trim_end("a:b")))
          assert.are.equals("c", pipe("cb:a", Module.trim_end("a:b")))
          assert.are.equals("c", pipe("cba:", Module.trim_end("a:b")))
        end)

        it("should return the initial string", function()
          assert.are.equals("a:bc", pipe("a:bc", Module.trim_end("a:b")))
        end)
      end)
    end)

    describe("trim()", function()
      describe("without chars", function()
        it("should delete whitespaces from each sides", function()
          assert.are.equals("aba", pipe(" aba ", Module.trim()))
          assert.are.equals("aba", pipe("\taba\t", Module.trim()))
          assert.are.equals("aba", pipe(" \taba\t ", Module.trim()))
        end)

        it("should return the initial string", function()
          assert.are.equals("abc", pipe("abc", Module.trim()))
        end)
      end)

      describe("with chars", function()
        it("should delete the single letter `a` each sides", function()
          assert.are.equals("b", pipe("aba", Module.trim("a")))
        end)

        it("should delete all consecutive letters `a` from each sides", function()
          assert.are.equals("b", pipe("aaabaaa", Module.trim("a")))
        end)

        it("should delete all consecutive given letters from each sides", function()
          assert.are.equals("c", pipe("a:bca:b", Module.trim("a:b")))
          assert.are.equals("c", pipe(":abc:ab", Module.trim("a:b")))
          assert.are.equals("c", pipe(":bac:ba", Module.trim("a:b")))
          assert.are.equals("c", pipe("b:acb:a", Module.trim("a:b")))
          assert.are.equals("c", pipe("ba:cba:", Module.trim("a:b")))
        end)

        it("should return the initial string", function()
          assert.are.equals("ca:bc", pipe("ca:bc", Module.trim("a:b")))
        end)
      end)
    end)

    describe("split()", function()
      it("should returns an array of 3 strings", function()
        local actual = pipe("a:b:c", Module.split(":"))
        assert.are.same({ "a", "b", "c" }, actual)
      end)

      it("should discard empty segments at start and end of the sequence", function()
        local actual = pipe(":a:b:c:", Module.split(":"))
        assert.are.same({ "a", "b", "c" }, actual)
      end)

      it("should keep empty segments inside the sequence", function()
        local actual = pipe("a::c", Module.split(":"))
        assert.are.same({ "a", "", "c" }, actual)
      end)

      it("should returns an array with the full string when the separator is not founded", function()
        local actual = pipe("abc", Module.split(":"))
        assert.are.same({ "abc" }, actual)
      end)
    end)

    describe("words()", function()
      it("should split the given string based on the whitespaces", function()
        local actual = pipe("aaa bbb ccc", Module.words)
        assert.are.same({ "aaa", "bbb", "ccc" }, actual)
      end)

      it("should handle multiple consecutive whitespaces", function()
        local actual = pipe("aaa   bbb \t ccc", Module.words)
        assert.are.same({ "aaa", "bbb", "ccc" }, actual)
      end)

      it("should discard empty segments at start and end of the sequence", function()
        local actual = pipe("  aaa bbb ccc  ", Module.words)
        assert.are.same({ "aaa", "bbb", "ccc" }, actual)
      end)

      it("should returns an array with the full string in absence of whitespaces", function()
        local actual = pipe("aaa:bbb:ccc", Module.words)
        assert.are.same({ "aaa:bbb:ccc" }, actual)
      end)
    end)
  end)
end)
