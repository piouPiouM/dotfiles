local F = require("ppm.toolkit.fp.function")
local pipe = F.pipe

describe("Predicate", function()
  local Module = require("ppm.toolkit.fp.Predicate")
  local is_positive = function(n) return n > 0 end
  local is_even = function(n) return n % 2 == 0 end

  describe("pipeables", function()
    describe("contramap()", function()
      it("should retrieve the table's inner value then pass it to the `is_positive` predicate", function()
        local predicate = pipe(
          is_positive,
          Module.contramap(function(t) return t.a end)
        )
        assert.is_true(predicate({ a = 1 }))
        assert.is_false(predicate({ a = 0 }))
        assert.is_false(predicate({ a = -1 }))
      end)
    end)

    describe("A() aka or()", function()
      it("should validate all numbers, except negative evens", function()
        local predicate = pipe(is_positive, Module.A(is_even))
        assert.is_false(predicate(-3))
        assert.is_true(predicate(-2))
        assert.is_false(predicate(-1))
        assert.is_true(predicate(0))
        assert.is_true(predicate(1))
        assert.is_true(predicate(2))
        assert.is_true(predicate(3))
      end)
    end)

    describe("K() aka and()", function()
      it("should only validate even positive numbers", function()
        local predicate = pipe(is_positive, Module.K(is_even))
        assert.is_false(predicate(-3))
        assert.is_false(predicate(-2))
        assert.is_false(predicate(-1))
        assert.is_false(predicate(0))
        assert.is_false(predicate(1))
        assert.is_true(predicate(2))
        assert.is_false(predicate(3))
      end)
    end)
  end)

  describe("utils", function()
    describe("N() aka not()", function()
      it("should only validate negative numbers", function()
        local predicate = Module.N(is_positive)
        assert.is_true(predicate(-3))
        assert.is_true(predicate(-2))
        assert.is_true(predicate(-1))
        assert.is_true(predicate(0))
        assert.is_false(predicate(1))
        assert.is_false(predicate(2))
        assert.is_false(predicate(3))
      end)
    end)
  end)
end)
