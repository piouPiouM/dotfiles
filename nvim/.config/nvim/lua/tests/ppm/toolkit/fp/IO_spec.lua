local spy = require("luassert.spy")
local _u = require("tests.ppm.utils")
local F = require("ppm.toolkit.fp.function")
local pipe = F.pipe

describe("IO", function()
  local Module = require("ppm.toolkit.fp.IO")
  local double

  before_each(function()
    double = spy.new(function(n) return _u.double(n) end)
  end)

  describe("constructors", function()
    describe("of()", function()
      it("should convert the value to a lazy function", function()
        local actual = Module.of(1)
        assert.is_function(actual)
        assert.are.equals(1, actual())
      end)
    end)
  end)

  describe("pipeables", function()
    describe("ap()", function()
      it("should apply lazily the double function", function()
        local actual = pipe(Module.of(double), Module.ap(Module.of(1)))
        assert.is_function(actual)
        assert.spy(double).was.not_called()
        assert.are.equals(2, actual())
        assert.spy(double).was.called()
      end)
    end)

    describe("flatmap()", function()
      it("should double the value only when the resulting function is called", function()
        local f = function(n) return Module.of(double(n)) end
        local actual = pipe(Module.of(1), Module.flatmap(f))
        assert.is_function(actual)
        assert.spy(double).was.not_called()
        assert.are.equals(2, actual())
        assert.spy(double).was.called()
      end)
    end)

    describe("flatten()", function ()
      it("should unwrap the inner lazy function", function ()
        local actual = pipe(Module.of(Module.of(1)), Module.flatten)
        assert.is_function(actual)
        assert.are.equals(1, actual())
      end)
    end)

    describe("map()", function()
      it("should double the value only when the resulting function is called", function()
        ---@diagnostic disable-next-line: param-type-mismatch
        local actual = pipe(Module.of(1), Module.map(double))
        assert.is_function(actual)
        assert.spy(double).was.not_called()
        assert.are.equals(2, actual())
        assert.spy(double).was.called()
      end)
    end)
  end)
end)