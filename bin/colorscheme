#!/usr/bin/env zsh
# -------------------------------------------------------------------
# vim:et sts=2 sw=2 ft=zsh
# -------------------------------------------------------------------
# @name colorscheme
# @description Apply the colorscheme corresponding to the given mode to my tools.
# @arg $1 string One of available modes.

typeset -Ar _mode_map=(
  "dark" "catppuccin-mocha"
  "light" "catppuccin-latte"
  "soft-dark" "rose-pine"
  "soft-light" "rose-pine-dawn"
)

_success() {
  builtin emulate -L zsh

  echo "‚çª Theme applied for ${1}"
}

main() {
  builtin emulate -L zsh

  local -r _current_mode="$(<$HOME/.theme)" 2> /dev/null
  local -r _mode="$1"

  if [[ -z $_mode_map[$_mode] ]]; then
    echo "Unknown mode given. Use one of ${(k)_mode_map}."
    return 1
  fi

  local -r _theme=$_mode_map[$_mode]

  export PPM_THEME=$_theme

  # Use `>|` to bypass noclobber option
  if [[ $_current_mode != $_mode ]]; then
    echo $_mode >| "${HOME}/.theme" 
    autoload -Uz theme-kitty && theme-kitty $_theme && _success "Kitty"
    autoload -Uz theme-bat && theme-bat $_theme && _success "Bat"
    autoload -Uz theme-btop && theme-btop $_theme && _success "btop"
    autoload -Uz theme-fzf && theme-fzf $_theme && _success "fzf"
    autoload -Uz theme-lazygit && theme-lazygit && autoload theme-lazygit && theme-lazygit $_theme && _success "Lazygit"

    # zimfw command is not available because it's a function loaded by `$ZIM_HOME/init.zsh`.
    [ -f "${ZIM_HOME}"/zimfw.zsh ] && source "${ZIM_HOME}"/zimfw.zsh compile -q
  fi
}

main "$@"